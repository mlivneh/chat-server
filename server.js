/**
 * ◊©◊®◊™ WebSocket ◊¢◊ù ◊™◊û◊ô◊õ◊î ◊û◊ï◊®◊ó◊ë◊™ ◊ë◊°◊ï◊í◊ô ◊î◊ï◊ì◊¢◊ï◊™
 * ◊û◊©◊™◊û◊© ◊ë◊û◊ï◊ì◊ï◊ú handlers.js ◊ú◊ò◊ô◊§◊ï◊ú ◊ë◊°◊ï◊í◊ô ◊î◊î◊ï◊ì◊¢◊ï◊™ ◊î◊©◊ï◊†◊ô◊ù
 */
const WebSocket = require('ws');
const handlers = require('./handlers');

const server = new WebSocket.Server({ port: process.env.PORT || 3000 });
const rooms = {};

server.on('connection', (socket) => {
  console.log('üîå New connection established');
  
  socket.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);
      const { type, room } = data;
      
      if (!room) {
        console.error("‚ùå Room ID is required");
        return;
      }
      
      // ◊ô◊¶◊ô◊®◊™ ◊ó◊ì◊® ◊ê◊ù ◊ú◊ê ◊ß◊ô◊ô◊ù
      if (!rooms[room]) {
        rooms[room] = { sockets: [], history: [] };
        console.log(`üè† New room created: ${room}`);
      }
      
      // ◊ò◊ô◊§◊ï◊ú ◊ë◊î◊ï◊ì◊¢◊î ◊ú◊§◊ô ◊°◊ï◊í
      if (handlers[type]) {
        // ◊ê◊ù ◊ß◊ô◊ô◊ù ◊û◊ò◊§◊ú ◊°◊§◊¶◊ô◊§◊ô ◊ú◊°◊ï◊í ◊ñ◊î, ◊î◊©◊™◊û◊© ◊ë◊ï
        handlers[type](socket, data, rooms);
      } else {
        // ◊ê◊ó◊®◊™, ◊î◊©◊™◊û◊© ◊ë◊û◊ò◊§◊ú ◊î◊í◊†◊®◊ô
        handlers.generic(socket, data, rooms);
      }
    } catch (e) {
      console.error("‚ùå Error processing message:", e.message);
      console.error("Raw message:", msg.toString());
    }
  });
  
  socket.on('close', () => {
    const room = socket.room;
    const username = socket.username || '◊ê◊†◊ï◊†◊ô◊û◊ô';
    
    if (room && rooms[room]) {
      // ◊î◊°◊®◊™ ◊î◊©◊ó◊ß◊ü ◊û◊î◊ó◊ì◊®
      rooms[room].sockets = rooms[room].sockets.filter(s => s !== socket);
      
      // ◊î◊ï◊ì◊¢◊î ◊¢◊ú ◊¢◊ñ◊ô◊ë◊î
      const leaveMessage = {
        type: 'TEXT',
        sender: '◊û◊¢◊®◊õ◊™',
        content: `${username} ◊¢◊ñ◊ë/◊î ◊ê◊™ ◊î◊ó◊ì◊®`
      };
      
      // ◊©◊û◊ô◊®◊™ ◊î◊î◊ï◊ì◊¢◊î ◊ë◊î◊ô◊°◊ò◊ï◊®◊ô◊î
      rooms[room].history.push(leaveMessage);
      
      // ◊©◊ú◊ô◊ó◊î ◊ú◊õ◊ï◊ú◊ù
      rooms[room].sockets.forEach(s => {
        if (s.readyState === WebSocket.OPEN) {
          s.send(JSON.stringify(leaveMessage));
        }
      });
      
      console.log(`üë§ ${username} left room "${room}"`);
      
      // ◊û◊ó◊ô◊ß◊™ ◊ó◊ì◊®◊ô◊ù ◊®◊ô◊ß◊ô◊ù
      if (rooms[room].sockets.length === 0) {
        delete rooms[room];
        console.log(`üè† Room "${room}" was deleted (empty)`);
      }
    }
  });
  
  // ◊ò◊ô◊§◊ï◊ú ◊ë◊©◊í◊ô◊ê◊ï◊™
  socket.on('error', (error) => {
    console.error(`‚ùå WebSocket Error: ${error.message}`);
  });
});

console.log(`WebSocket server is running on port ${process.env.PORT || 3000}`);
console.log(`Supported message types: ${Object.keys(handlers).join(', ')}`);

const WebSocket = require('ws');
const server = new WebSocket.Server({ port: process.env.PORT || 3000 });

const rooms = {};

server.on('connection', (socket) => {
  console.log('üîå New connection established');
  
  socket.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);
      const { type, room, sender, content } = data;
      
      if (!room) {
        console.error("‚ùå Room ID is required");
        return;
      }
      
      // ◊ô◊¶◊ô◊®◊™ ◊ó◊ì◊® ◊ê◊ù ◊ú◊ê ◊ß◊ô◊ô◊ù
      if (!rooms[room]) {
        rooms[room] = { sockets: [], history: [] };
        console.log(`üè† New room created: ${room}`);
      }
      
      // ◊ò◊ô◊§◊ï◊ú ◊ë◊°◊ï◊í◊ô◊ù ◊©◊ï◊†◊ô◊ù ◊©◊ú ◊î◊ï◊ì◊¢◊ï◊™
      switch (type) {
        case 'JOIN':
          // ◊î◊¶◊ò◊®◊§◊ï◊™ ◊ú◊ó◊ì◊®
          socket.room = room;
          socket.username = sender || '◊ê◊†◊ï◊†◊ô◊û◊ô';
          rooms[room].sockets.push(socket);
          
          console.log(`üë§ ${socket.username} joined room "${room}"`);
          
          // ◊©◊ú◊ô◊ó◊™ ◊î◊ï◊ì◊¢◊™ ◊û◊¢◊®◊õ◊™ ◊ú◊õ◊ï◊ú◊ù
          const joinMessage = {
            type: 'TEXT',
            sender: '◊û◊¢◊®◊õ◊™',
            content: `${socket.username} ◊î◊¶◊ò◊®◊£/◊î ◊ú◊ó◊ì◊®`
          };
          
          // ◊©◊û◊ô◊®◊™ ◊î◊î◊ï◊ì◊¢◊î ◊ë◊î◊ô◊°◊ò◊ï◊®◊ô◊î
          rooms[room].history.push(joinMessage);
          
          // ◊©◊ú◊ô◊ó◊î ◊ú◊õ◊ï◊ú◊ù
          rooms[room].sockets.forEach(s => {
            if (s.readyState === WebSocket.OPEN) {
              s.send(JSON.stringify(joinMessage));
            }
          });
          
          // ◊©◊ú◊ô◊ó◊™ ◊î◊ô◊°◊ò◊ï◊®◊ô◊î
          if (rooms[room].history.length > 0) {
            // ◊©◊ú◊ô◊ó◊™ ◊¢◊ì 10 ◊î◊ï◊ì◊¢◊ï◊™ ◊ê◊ó◊®◊ï◊†◊ï◊™ ◊ë◊ú◊ë◊ì
            const recentHistory = rooms[room].history.slice(-10);
            socket.send(JSON.stringify({
              type: 'HISTORY',
              content: recentHistory
            }));
          }
          break;
          
        case 'TEXT':
          // ◊ï◊ô◊ì◊ï◊ê ◊™◊ï◊õ◊ü ◊™◊ß◊ô◊ü
          if (!content) {
            console.error("‚ùå Message content is empty");
            return;
          }
          
          // ◊ô◊¶◊ô◊®◊™ ◊ê◊ï◊ë◊ô◊ô◊ß◊ò ◊î◊î◊ï◊ì◊¢◊î
          const textMessage = {
            type: 'TEXT',
            sender: socket.username || sender || '◊ê◊†◊ï◊†◊ô◊û◊ô',
            content: content
          };
          
          // ◊©◊û◊ô◊®◊î ◊ë◊î◊ô◊°◊ò◊ï◊®◊ô◊î (◊¢◊ì 50 ◊î◊ï◊ì◊¢◊ï◊™ ◊ê◊ó◊®◊ï◊†◊ï◊™)
          rooms[room].history.push(textMessage);
          if (rooms[room].history.length > 50) {
            rooms[room].history.shift();
          }
          
          // ◊©◊ú◊ô◊ó◊î ◊ú◊õ◊ï◊ú◊ù
          rooms[room].sockets.forEach(s => {
            if (s.readyState === WebSocket.OPEN) {
              s.send(JSON.stringify(textMessage));
            }
          });
          
          console.log(`üí¨ Text message in room ${room} from ${textMessage.sender}`);
          break;
          
        case 'STATUS':
          // ◊©◊ú◊ô◊ó◊™ ◊°◊ò◊ò◊ï◊° ◊û◊©◊ó◊ß ◊ú◊õ◊ï◊ú◊ù ◊ó◊ï◊• ◊û◊î◊©◊ï◊ú◊ó
          const statusMessage = {
            type: 'STATUS',
            sender: socket.username || sender || '◊ê◊†◊ï◊†◊ô◊û◊ô',
            content: content
          };
          
          rooms[room].sockets.forEach(s => {
            if (s !== socket && s.readyState === WebSocket.OPEN) {
              s.send(JSON.stringify(statusMessage));
            }
          });
          
          console.log(`üéÆ Game status update in room ${room} from ${statusMessage.sender}`);
          break;
          
        default:
          console.log(`‚ö†Ô∏è Unknown message type: ${type}`);
      }
    } catch (e) {
      console.error("‚ùå Error processing message:", e.message);
      console.error("Raw message:", msg.toString());
    }
  });
  
  socket.on('close', () => {
    const room = socket.room;
    const username = socket.username || '◊ê◊†◊ï◊†◊ô◊û◊ô';
    
    if (room && rooms[room]) {
      // ◊î◊°◊®◊™ ◊î◊©◊ó◊ß◊ü ◊û◊î◊ó◊ì◊®
      rooms[room].sockets = rooms[room].sockets.filter(s => s !== socket);
      
      // ◊î◊ï◊ì◊¢◊î ◊¢◊ú ◊¢◊ñ◊ô◊ë◊î
      const leaveMessage = {
        type: 'TEXT',
        sender: '◊û◊¢◊®◊õ◊™',
        content: `${username} ◊¢◊ñ◊ë/◊î ◊ê◊™ ◊î◊ó◊ì◊®`
      };
      
      // ◊©◊û◊ô◊®◊™ ◊î◊î◊ï◊ì◊¢◊î ◊ë◊î◊ô◊°◊ò◊ï◊®◊ô◊î
      rooms[room].history.push(leaveMessage);
      
      // ◊©◊ú◊ô◊ó◊î ◊ú◊õ◊ï◊ú◊ù
      rooms[room].sockets.forEach(s => {
        if (s.readyState === WebSocket.OPEN) {
          s.send(JSON.stringify(leaveMessage));
        }
      });
      
      console.log(`üë§ ${username} left room "${room}"`);
      
      // ◊û◊ó◊ô◊ß◊™ ◊ó◊ì◊®◊ô◊ù ◊®◊ô◊ß◊ô◊ù
      if (rooms[room].sockets.length === 0) {
        delete rooms[room];
        console.log(`üè† Room "${room}" was deleted (empty)`);
      }
    }
  });
  
  // ◊ò◊ô◊§◊ï◊ú ◊ë◊©◊í◊ô◊ê◊ï◊™
  socket.on('error', (error) => {
    console.error(`‚ùå WebSocket Error: ${error.message}`);
  });
});

console.log(`WebSocket server is running on port ${process.env.PORT || 3000}`);
